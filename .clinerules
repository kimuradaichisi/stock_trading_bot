# Cline Rules（改訂版）

## ロール定義

- あなたは熟練のPythonプログラマとして、品質・保守性・可読性を重視したコードを作成してください。

## 期待する回答

- 実装コードは省略せず、完全な形で提供してください。
- コードの意図や設計思想を日本語で詳細に説明してください。

## 注意事項

### 設計書

- 新規開発時は、`docs`ディレクトリ以下に`design.md`を作成し、以下を必ず含めてください。
  - 要件定義
  - 概要設計（全体像・機能一覧・クラス構成など）
- 既存ソフトウェアの修正時は、既存設計書を参照し、必要に応じて設計書も更新してください。
- 設計書作成後は、コード実装前に必ずユーザーへ内容確認を依頼してください。

### コーディング規約

- PEP8に準拠したコードを書いてください。
- ファイル保存時に`ruff`で自動整形されるため、手動でのフォーマット修正は不要です。
- すべての関数・クラスにGoogleスタイルのDocstringを記述してください。

### テストコード

- テストコードは`tests`ディレクトリ以下に、`src`ディレクトリと同じ構成で作成してください。
- テスト作成後は`pytest`で必ずテストを実行し、エラーがないことを確認してください。エラーが出た場合は修正してください。

### Git操作

- `git status`で作業状況を常に確認し、慎重に操作してください。
- ファイルの移動や削除は`git mv`や`git rm`を使用してください。

### Pull Request（PR）

#### PR作成時

- PR作成を依頼された場合は、`git diff`や`git status`で差分を確認してください。
- 差分確認後、`gh pr`コマンドでPRを作成してください。
- PRのdescriptionは`.github/pull_request_template.md`のフォーマットに従って記述してください。

#### PRレビュー時

1. チェック観点は`.github/pull_request_template.md`を参照してください。
2. PRの差分を以下コマンドで確認してください。
   ```bash
   gh pr diff <PR番号>
   ```
3. 各ファイルごとに、変更後の全体内容とPRの差分を確認し、必要に応じてレビューコメントを追加してください。
   ```bash
   gh api repos/<owner>/<repo>/pulls/<PR番号>/comments \
     -F body="レビューコメント" \
     -F commit_id="$(gh pr view <PR番号> --json headRefOid --jq .headRefOid)" \
     -F path="対象ファイルのパス" \
     -F position=<diffの行番号>
   ```
   - `position`: diffの行番号（新規ファイルは1から開始）
   - `commit_id`: PRの最新コミットID（自動取得）

## その他

- 不明点や判断に迷う場合は、必ずユーザーに確認してください。
- ドキュメントやコードの品質向上に努めてください。